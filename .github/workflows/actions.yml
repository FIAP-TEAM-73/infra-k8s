name: "Terraform"

on:
  push:
    branches:
      - main
      - RELEASE/*
  pull_request:

env:
  TF_CLOUD_ORGANIZATION: "FIAP-TEAM-73"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "terraform-infra-k8s"
  CONFIG_DIRECTORY: "./"

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
                  // 1. Retrieve existing bot comments for the PR
                  const { data: comments } = await github.rest.issues.listComments({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                  });
                  const botComment = comments.find(comment => {
                    return comment.user.type === 'Bot' && comment.body.includes('HCP Terraform Plan Output')
                  });
                  const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
                  #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
                  #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
                  #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

                  <details><summary>Show Plan</summary>

                  \`\`\`terraform\n
                  ${process.env.PLAN}
                  \`\`\`

                  </details>

                  *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
                  // 3. Delete previous comment so PR timeline makes sense
                  if (botComment) {
                    github.rest.issues.deleteComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      comment_id: botComment.id,
                    });
                  }
                  github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: output
                  });

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/RELEASE/*') && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
